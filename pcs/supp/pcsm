#!/bin/bash
# pcsm
# WCTC cluster component status monitoring script
#
# Report the status of job managers, task controllers, and workers
#  associated with a particular queue
#
# Inputs
#  1. queue          Queue to monitor {short, long, testing}
#
# Outputs
#  Job manager and worker status
#
#
#  The script reads the worker configuration from a queue-specific
#    configuration file stored in 
#    /home/pcs/tc/cfg
#
#  The configuration file specifies which nodes are active along
#   with the number of workers running on each node.
#
#
#  Job managers and task controllers specify status by touching a heartbeat file
#   stored in 
#    /home/pcs/supp/hb
#
#  Job manager heartbeat file naming convention: <jm name>_<queue># 
#   Example
#   /home/pcs/supp/hb/cml_short
#
#  Task controller heartbeat file naming convention: tc_<queue>
#   Example
#   /home/pcs/supp/hb/tc_short
#
#     Copyright (C) 2013, Terry Ferrett and Matthew C. Valenti
#     For full copyright information see the bottom of this file. 


############ process input arguments
# only one input argument
if [ $# -ne 1 ]
then
    echo "Improper input arguments."
    echo "Usage:"
    echo "pcsm {short,long,testing}"
    exit 1;
fi

# check if specified queue is valid
#  set configuration file
case $1 in
    short)
	CfgFi=/home/pcs/tc/cfg/pcs_short_384.cfg
	;;
    long)
	CfgFi=/home/pcs/tc/cfg/pcs_long_384.cfg
	;;
    testing)
	CfgFi=/home/pcs/tc/cfg/pcs_test.cfg
	;;
	*)
	echo "Error specifying queue. Please select one of {short,long,testing}."
	exit 1
	;;
esac

queue=$1

# input variables
#
# queue   name of this queue 
# CfgFi   configuration file for this queue
#################################





#### read configuration file line by line searching for hb period and hb path
# hearbeat path variable name: hb_path
# heartbeat period variable name: hb_period

##### read configuration file line by line searching for fields
# worker
# hb_path
# hb_period

node_num=0
totwrk=0
while read line
do
    # return line if node/worker configuration, else blank
    node_cfg_k=`echo $line |grep -i worker |grep -i '='`
    
    #  parse for node and number of workers
    if [[ ! -z $node_cfg_k ]]
    then
	# parsing. separate based on '=', then on spaces
	node_nwrk=`echo $node_cfg_k | awk 'BEGIN { FS = "=" } ; { print $2 }'`
	node[$node_num]=`echo $node_nwrk | awk '{print $1}'`
	nwrk[$node_num]=`echo $node_nwrk | awk '{print $2}'`

        #count total number of workers in system
	totwrk=$((nwrk[$node_num]+totwrk))  
	node_num=$((node_num+1))
    fi

    # get path to heartbeat files
    HB_PATH_K=`echo $line |grep -i hb_path |grep -i '='`
    if [[ ! -z $HB_PATH_K ]]
    then
    HB_PATH=`echo $HB_PATH_K | awk 'BEGIN { FS = "=" } ; { print $2 }'`
    fi

    # get heartbeat period
    HB_PERIOD_K=`echo $line |grep -i hb_period |grep -i '='`
    if [[ ! -z $HB_PERIOD_K ]]
    then
    HB_PERIOD=`echo $HB_PERIOD_K | awk 'BEGIN { FS = "=" } ; { print $2 }'`
    fi
    
done < $CfgFi

# node   - each array entry contains a node name
# nwrk   - each array entry contains the number of workers per node
# totwrk - total number of workers in the system
# HB_PERIOD - heartbeat period in seconds 
# HB_PATH - path to directory containing heartbeat files
#####################################################



#### connect to nodes and check status of all workers
for((k=0;k<${#node[@]};k++))
do
    
# count number of workers up for this node and queue
    w_up=`ssh ${node[k]} "ps aux" |grep -i matlab |grep -i $queue |wc |awk '{print $1}'`

# number of workers down is difference between total and up
    w_diff[k]=$((${nwrk[k]}-$w_up))

#w_diff - array of integers indicating how many workers are down on each
#          node in $node
done




# form array of worker status
wdown=0  # total number of workers down
ndownn=0 # index of n-th node having down workers

for((k=0;k<${#node[@]};k++))
do
    if [ ${w_diff[$k]} -gt 0 ] 
    then
	w_status[$ndownn]="${node[k]}    ${w_diff[$k]}"
	wdown=$(($wdown+${w_diff[$k]}))
	ndownn=$((ndownn+1))
    fi	
done

if [ $ndownn -eq 0 ]
then
    w_intro="All $totwrk workers are up."
else
    w_intro="$(($totwrk-$wdown)) of $totwrk workers are up."
fi
###########################################################




####### find job managers associated with this queue
# tokenize screen output to find screen session names
JMS=`screen -ls |grep -i \_$queue |awk 'BEGIN {FS="."}; {print $2}'|awk '{print $1}'`

JMSn=`echo $JMS |awk '{print NF}'`

# $JMS contains all job managers. tokenize using awk.
for((k=1;k<=$JMSn;k++))
do
    JM[$(($k-1))]=`echo ${JMS[*]} | awk -vk="$k" '{print $k}'`
done

# JM - contains each job manager name as array entry
# JMSn - number of job managers
############




######## check process heartbeats 
# time since last heartbeat in seconds
GetLastHB()
{
    local FILE=$1

    local NOW=`date +%s`
    local HB_TIME=`stat -c %Z $FILE`
    local LAST_HB=$(($NOW-$HB_TIME))
 
    echo $LAST_HB
}

#### determine job manager status ######
for((k=0;k<JMSn;k++))
do
    
    if [ -a $HB_PATH/${JM[$k]} ]
    then
# compute time since last heartbeat
	LAST_HB=$(GetLastHB $HB_PATH/${JM[$k]})
#	NOW=`date +%s`
#	HB_TIME=`stat -c %Z $HB_PATH/${JM[$k]}`
#	LAST_HB=$(($NOW-$HB_TIME))
	
# if heartbeat recent, assume JM up
	if [ $LAST_HB -gt $HB_PERIOD ]
	then
	    JMSTAT[$k]="Job manager ${JM[$k]} is down."
	else
	    JMSTAT[$k]="Job manager ${JM[$k]} is up."
	fi
    else
	JMSTAT[$k]="Job Manager ${JM[$k]} has not created a heartbeat file."
    fi
done

if [ -z "$JMSTAT[0]" ]
then
    JMINTRO[0]="No Job Managers are running."
else
    JMINTRO[0]="=Job Manager Status="
fi
################################




##### determine task controller status based on last heartbeat
if [ -a $HB_PATH/tc_$queue ]
then
    LAST_HB=$(GetLastHB $HB_PATH/tc_$queue)

    if [ $LAST_HB -gt $HB_PERIOD ]
    then
	TCSTAT="Task controller is down."
    else
	TCSTAT="Task controller is up."
    fi
else
    TCSTAT="Task controller has not created a heartbeat file."
fi

TCINTRO="=Task Controller Status="
#################################





### return results #####
echo "== WebCML $queue Queue Status Report =="

echo
echo $TCINTRO
echo $TCSTAT

echo
echo $JMINTRO

# echo job manager status
for((k=0;k<JMSn;k++))
do
    echo ${JMSTAT[$k]}
done

echo ""
echo ""

# echo overall worker status
echo $w_intro

echo "Node      # Workers Down"
# echo status of workers on each node
for((k=0;k<${#w_status[*]};k++))
do
    echo "${w_status[$k]}"
done

########################



#     This library is free software;  
#     you can redistribute it and/or modify it under the terms of 
#     the GNU Lesser General Public License as published by the 
#     Free Software Foundation; either version 2.1 of the License,                                                       
#     or (at your option) any later version.
#                                                                                                                        
#     This library is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#     Lesser General Public License for more details.     
#
#     You should have received a copy of the GNU Lesser General Public
#     License along with this library; if not, write to the Free Software
#     Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  US 