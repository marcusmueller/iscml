#!/bin/bash
# sp
#
# Execute CML error-rate simulation using cluster and single-core operation
#  and gather timing information.
#
# Inputs
#  1. Action
#  2. CML Scenario
#  3. Record
#
#   where 'Action' is 'run' or 'stop'
#  Calling Examples
#
#  1. Run CML scenario 'SpeedProfile', record 1
#   > ./sp run SpeedProfile 1     
#
#  2. Stop speed profiling process 'SpeedProfile 1'
#   > ./sp stop SpeedProfile 1
#    
#                                                               
#     Copyright (C) 2012, Terry Ferrett and Matthew C. Valenti   
#     For full copyright information see the bottom of this file.
#
#
# Execution Outline
#
#  == Run ==
# 1. Destroy existing speed tests.
#
# 2. Start stand-alone CML simulation on cluster head.
#
# 3. Start cluster simulation.
#
# 4. Wait until both stand alone and cluster simulations are finished.
#
# 5. Plot total trials vs time for both simulations.
#
# 
#  == Stop ==
# 
# 1. Kill screen session for stand-alone simulation
#
# 2. Move cluster simulation job file from JobRunning to JobOut


### error check input
if [ $# -lt 3 ]
then
echo "Not enough input arguments."
echo
echo "Usage:"
echo "sp {run|stop} {scenario} {record} {optional:ns}"
exit 1
fi

ACTION=$1
SCENARIO=$2                          # cml scenario and record to simulate
RECORD=$3

if [ $# -gt 3 ]
then
NS="true"
fi

ST_ROOT=`pwd`                        # speed test root
SUPP_DIR=$ST_ROOT/supp               # supporting matlab and bash scripts
FIG_DIR=$ST_ROOT/output              # speed test result output

CML_ROOT=/home/pcs/projects/cml      # path to cml

SC_SS=$SCENARIO\_$RECORD"_L"         # single-core screen session
C_SS=$SCENARIO\_$RECORD"_C"          # cluster screen session
M_SS=$SCENARIO\_$RECORD\_"M"         # monitor screen session

JOB_RUNNING_FN=/home/pcs/Projects/cml/JobRunning/$SCENARIO\_$RECORD".mat"  # jobrunning filename
JOB_OUT_FN=/home/pcs/Projects/cml/JobOut/$SCENARIO\_$RECORD".mat"          # jobout filename
FIG_FONTSIZE=16                      # font size for trial figure





stop_screen_session(){
screen -ls |grep $1 | awk -F . '{print $1}' |xargs kill 2> /dev/null
}


reset_sp_state(){
rm $JOB_OUT_FN
rm $CML_ROOT/output/$SCENARIO/*
}


destroy_existing_speed_test(){
stop_screen_session $SC_SS
stop_screen_session $C_SS
stop_screen_session $M_SS
reset_sp_state
}

stop_running_job(){
mv $JOB_RUNNING_FN $JOB_OUT_FN
}


stop_running_speed_test(){
stop_screen_session $SC_SS
stop_running_job
}


start_local_sim(){
screen -S $SC_SS -m -d matlab -singleCompThread -r "cd $CML_ROOT; CmlStartup; CmlSimulate('$SCENARIO',$RECORD); exit"
}


start_cluster_sim(){
screen -S $C_SS -m -d matlab -r "cd $CML_ROOT; CmlStartup; CmlClusterSubmit('$SCENARIO', $RECORD); exit"
}


start_monitor(){
screen -S $M_SS -m -d $SUPP_DIR/monitor_sims $SC_SS $C_SS $JOB_OUT_FN $CML_ROOT $SUPP_DIR $SCENARIO $RECORD $FIG_DIR $FIG_FONTSIZE $NS
}


case "$ACTION" in

run)
destroy_existing_speed_test

# don't start standalone if requested by user
if [ -z "$NS" ]
then
start_local_sim 
fi

start_cluster_sim 
start_monitor
;;

stop)
stop_running_speed_test
;;

*)
echo "Command not recognized. Please enter \"run\" or \"stop\" as first argument."

esac


#     This library is free software;                                            
#     you can redistribute it and/or modify it under the terms of               
#     the GNU Lesser General Public License as published by the                 
#     Free Software Foundation; either version 2.1 of the License,              
#     or (at your option) any later version.                                    
#                                                                               
#     This library is distributed in the hope that it will be useful,           
#     but WITHOUT ANY WARRANTY; without even the implied warranty of            
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         
#     Lesser General Public License for more details.                           
#                                                                               
#     You should have received a copy of the GNU Lesser General Public          
#     License along with this library; if not, write to the Free Software       
#     Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  US


