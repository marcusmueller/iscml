#!/bin/bash
# pcs
#
# Startup script for Parallel Computing Suite (PCS)
# 
#
# Command syntax
# > pcs {short|long|testing} {start|stop|restart}
#
# where 
#   Argument 1     Queue Type
#   Argument 2     Daemon action
#   Arguments 3-N  Optional. Specify job manager to associate with this queue.
#
#   = Queue Type =
#   
#   short    used for short-running tasks
#            The CML job manager executes in this queue
#
#   long     used for long running tasks
#            by default no job manager services this queue
#
#   testing  used to test the CML job manager
#
#  
#   = Daemon Action =
#
#   start     clear global queues                                                                             
#             move user tasks in user running queues to user input queues
#             start task controllers, worker controllers, workers                                                 
#
#   stop      clear global queues                                                                             
#             move user tasks in user running queues to user input queues
#             stop task controllers, worker controllers, workers                                                 
#             stop all job managers associated with this queue
#                                                                   
#   restart   execute stop and start operations
#
#
#   = Job Manager =
#   
#   cml       CML Job Manager
#
#
#   = Examples =
# 
#   Start the short queue and long queue daemons with no job managers
#   > pcs short start
#   > pcs long start
#
#    
#   Start the short queue daemon with CML job manager and stop
#   > pcs short start cml
#   > pcs short stop
#   
#
#     Copyright (C) 2012, Terry Ferrett and Matthew C. Valenti
#     For full copyright information see the bottom of this file.
#####

# define job manager startup functions stored in file 'jms'
source jms 


### functions for testing inputs ######
# echo input error and return
eie_ret(){
echo "Improper input arguments."
echo "Usage:"
echo "pcs {short|long|testing} {stop|start|restart} {job manager(s)}"
echo 
echo "Example: Start short queue and CML Job Manager"
echo " > pcs short start cml "
}

# check input action
cia(){
case $1 in
start)
echo "start"
;;
stop)
echo "stop"
;;
restart)
echo "restart"
;;
*)
echo "error"
;;
esac
}


# check queue parameter
cq(){
case $1 in
short)
echo "short"
;;
long)
echo "long"
;;
testing)
echo "testing"
;;
*)
echo "error"
;;
esac
}
#####################################




###process input arguments #########

#check for proper number of input arguments
# number inputs

if [ $# -lt 2 ]
then
eie_ret
exit 1
fi


Q=$(cq $1)    # read requested queue
IA=$(cia $2)  # read input argument

# exit only terminates calling shell so use
#  the following syntax for checking command line args
[[ "${Q:0:5}" == "error" ]] && eie_ret && exit
[[ "${IA:0:5}" == "error" ]] && eie_ret && exit


# every input argument past 2 is assumed to be a jm name
n_jms=0
for i in ${@:3}
do
JMS[$n_jms]=$i
n_jms=$n_jms+1
done
# now have n_jms and JMS
##########################



#### Special case: CML JM can only start in short queue
#### Check for this condition
#### Remove this code once CML JM can start in any queue
# exit if not short queue                                                                                     
#for i in ${@:3}
#do

#if [ "$i" = "cml" ]
#then
#case $Q in
#short)
#;;
#*)
#echo "CML JM currently only supported using short queue."
#exit 2
#;;
#esac
#fi

#done
#############
#############




### paths to daemons can be hard coded
## paths
                   
# task and worker controllers
PATH_TC=/home/pcs/tc/ctc/src
PATH_WC=/home/pcs/tc/cwc/src

# job managers
#PATH_CML_JM=/home/pcs/jm/cml/src

# Worker controlling scripts
#  commands used: slay_worker.sh
PATH=$PATH:/home/pcs/tc/cwc/src/bs

CFGP=/home/pcs/tc/cfg
#####################


# configuration files                                                                                                                             
scfg='pcs_short_384.cfg'   # short queue
lcfg='pcs_long_384.cfg'    # long queue
tcfg='pcs_test.cfg'        # testing queue
#####################                                                                                                                             


# based on queue assign names
case $Q in
short)
TC=stc
WC=swc
#JM=CmlJm
cfg=$scfg
#jmcfg='/home/pcs/jm/cml/cfg/CmlJobManager_cfg'
LOCKFILE=/home/pcs/tc/supp/lock/spcs_lock
;;
long)
TC=ltc
WC=lwc
#JM=
cfg=$lcfg
#jmcfg=
LOCKFILE=/home/pcs/tc/supp/lock/lpcs_lock
;;
testing)
TC=ttc
WC=twc
#JM=TCmlJm
cfg=$tcfg
#jmcfg='/home/pcs/jm/cml/cfg/TCmlJobManager_cfg'
LOCKFILE=/home/pcs/tc/supp/lock/tpcs_lock
;;
esac


# read config files
### read queues from config files
get_cfg_val(){
file=$1
key=$2
lst=`awk -vk="$key" -F"=" '$1~k{ print $2}' $file`
echo $lst
}


file=$CFGP/$cfg
PATH_IQ=$(get_cfg_val $file input_queue)
PATH_RQ=$(get_cfg_val $file run_queue)
PATH_OQ=$(get_cfg_val $file output_queue)



# error messages
LOCKFILE_EXISTS_ERR="PCS $Q is already running."
LOCKFILE_DOESNOTEXIST_ERR="PCS $Q is not running.  Execute 'pcs $Q {start|restart}' to start the service."
##########################




#### functions                                                                                                
start_job_managers(){
JMS=$1
n_jms=$2
Q=$3

for((k=0;k<n_jms;k++))
do
jm_${JMS[$k]} $file $Q
done
}

     
start_workers(){
WC=$1
CFG=$2
screen -S $WC -m -d matlab -r "cd $PATH_WC; cwcobj = startup_wc('$CFG'); cwcobj.cSta"
}


stop_screen_session(){
screen -ls |grep $1 | awk -F . '{print $1}' |xargs kill >/dev/null
}


stop_workers(){
WC=$1
Q=$2

# get active nodes and worker instances from configuration file
nodes_nums=$(get_cfg_val $file worker)

# postprocess to remove instance numbers
nodes=`echo $nodes_nums | awk -F" " '{ for (i = 1; i <= NF; i+=2) print $i; }'`

# number of nodes
NF=`echo $nodes| awk '{print NF}'`

# slay matlab instances on nodes
for((k=1;k<=NF;k++))
do
node=`echo $nodes |awk -vk="$k" '{print $k}'`
slay_worker.sh $node $Q > /dev/null 
echo $node
#2>&1
done

# stop worker controller screen session
stop_screen_session $WC
}


manage_controllers(){
TC=$1
CFG=$2
ss=$3

screen -S $TC -m -d matlab -r "cd $PATH_TC;tc_startup('$CFG','$ss')"
}


does_lockfile_exist(){
    if [ -e $1 ]; then
	echo "1"
    else
	echo "0"
    fi
}


# if statement for testing
lockfile_exists=$(does_lockfile_exist $LOCKFILE)

case $IA in
    start)

	if [ $lockfile_exists -eq 0 ]; then
            manage_controllers $TC $cfg start 

            # give task controller time to manipulate queues
            #  before workers begin manipulating tasks
	    sleep 10
            #####

	    start_workers $WC $cfg  

            # loop and start jms
	    start_job_managers $JMS $n_jms $Q
	    touch $LOCKFILE
	else
	    echo $LOCKFILE_EXISTS_ERR
	fi
	;; 

    restart)
        $0 $Q stop && sleep 5 && $0 $Q start
	;;

    stop)
	if [ $lockfile_exists -eq 1 ]; then

	    stop_screen_session $WC
	    stop_screen_session $TC
	    stop_screen_session \_$Q   # stop all JM's associated with this queue     
 
	    stop_workers $WC $Q
            # give workers time to die before manipulating
            #  queues
	    sleep 2
            #####	    
	    manage_controllers $TC $cfg stop

	    rm $LOCKFILE
	else
	    echo $LOCKFILE_DOESNOTEXIST_ERR
	fi
	;;
    *)
        eie_ret
	;;
esac
